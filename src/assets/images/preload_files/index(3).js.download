(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by LiveScript 1.3.0
(function(){
  var ret;
  ret = {
    id: 'spin',
    name: 'Spin',
    desc: "most common spinner circle that works for any situation. single color version",
    tags: ['spinner', 'ball', 'circle', 'rotate', 'rosary', 'loader', 'ajax'],
    slug: "ajax-spinner-gif",
    type: 'spinner',
    license: 'free',
    edit: {
      color: {
        name: "Color",
        type: 'color',
        'default': '#ff727d'
      },
      scaling: {
        name: "Scale Direction",
        type: 'choice',
        'default': 'all',
        values: ['all', 'vertically', 'horizontally']
      },
      radius: {
        name: "Ball Radius",
        type: 'number',
        'default': 6,
        min: 1,
        max: 100
      },
      w: {
        name: "Width",
        type: 'number',
        'default': 30,
        hidden: false,
        min: 0,
        max: 100
      },
      ratio: {
        name: "Scale Ratio",
        type: 'number',
        'default': 1.5,
        min: 0.01,
        max: 20,
        step: 0.01
      },
      count: {
        name: "Ball Count",
        type: 'number',
        'default': 8,
        min: 1
      }
    },
    download: function(arg$){
      var type, cfg, s, ref$, ratioX, ratioY, html, css, i$, to$, i, x, y;
      type = arg$.type;
      if (type !== 'css') {
        return;
      }
      cfg = this.config;
      s = (ref$ = this.config.size / 100) > 1 ? ref$ : 1;
      ratioX = (ref$ = cfg.scaling) === 'all' || ref$ === 'vertically' ? +cfg.ratio : 1;
      ratioY = (ref$ = cfg.scaling) === 'all' || ref$ === 'horizontally' ? +cfg.ratio : 1;
      html = repeatString$("<div><div></div></div>", cfg.count);
      /* use backface + translateZ to create composite layer to prevent blurring */
      css = "@keyframes $id {\n  0% {\n    opacity: 1;\n    backface-visibility: hidden;\n    transform: translateZ(0) scale(" + ratioX + "," + ratioY + ");\n  } 100% {\n    opacity: 0;\n    backface-visibility: hidden;\n    transform: translateZ(0) scale(1,1);\n  }\n}\n.$id div > div {\n  position: absolute;\n  width: " + cfg.radius * 2 * s + "px;\n  height: " + cfg.radius * 2 * s + "px;\n  border-radius: 50%;\n  background: " + cfg.color + ";\n  animation: $id " + 1 / cfg.speed + "s linear infinite;\n}";
      for (i$ = 0, to$ = cfg.count; i$ < to$; ++i$) {
        i = i$;
        x = Math.round((cfg.w * Math.cos(Math.PI * 2 * i / cfg.count) - cfg.radius) * s);
        y = Math.round((cfg.w * Math.sin(Math.PI * 2 * i / cfg.count) - cfg.radius) * s);
        css += ".$id div:nth-child(" + (i + 1) + ") > div {\n  left: " + (50 * s + x) + "px;\n  top: " + (50 * s + y) + "px;\n  animation-delay: " + -(cfg.count - i - 1) / (cfg.count * cfg.speed) + "s;\n}\n.$id > div:nth-child(" + (i + 1) + ") {\n  transform: rotate(" + 360 * i / cfg.count + "deg);\n  transform-origin: " + ((cfg.radius + 50) * s + x) + "px " + ((cfg.radius + 50) * s + y) + "px;\n}";
      }
      return {
        html: html,
        css: css
      };
    },
    dom: function(cfg){
      var svg, ratioX, ref$, ratioY, w, r, c, count, vss, vos, i$, i, a, degree, x, y, o, d;
      svg = [];
      ratioX = (ref$ = cfg.scaling) === 'all' || ref$ === 'vertically' ? +cfg.ratio : 1;
      ratioY = (ref$ = cfg.scaling) === 'all' || ref$ === 'horizontally' ? +cfg.ratio : 1;
      w = +cfg.w;
      r = +cfg.radius;
      c = cfg.color;
      count = +cfg.count || 1;
      vss = [ratioX, ratioY].join(" ");
      vss = vss + ";1 1";
      vos = "1;0";
      for (i$ = 0; i$ < count; ++i$) {
        i = i$;
        a = 2 * Math.PI * i / count;
        degree = a * 180 / Math.PI;
        x = 50 + w * Math.cos(a);
        y = 50 + w * Math.sin(a);
        o = (count - i) / count;
        d = -(count - i - 1) / (count * cfg.speed);
        svg.push("<g transform=\"translate(" + x + "," + y + ")\">\n<g transform=\"rotate(" + degree + ")\">\n<circle cx=\"0\" cy=\"0\" r=\"" + r + "\" fill=\"" + c + "\" fill-opacity=\"" + o + "\">\n  <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"" + d + "s\"\n  values=\"" + vss + "\" keyTimes=\"0;1\" dur=\"" + 1 / cfg.speed + "s\" repeatCount=\"indefinite\"/>\n  <animate attributeName=\"fill-opacity\" keyTimes=\"0;1\" dur=\"" + 1 / cfg.speed + "s\" repeatCount=\"indefinite\"\n  values=\"" + vos + "\" begin=\"" + d + "s\"/>\n</circle>\n</g>\n</g>");
      }
      svg = svg.join("");
      return svg;
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  if (typeof ModManager != 'undefined' && ModManager !== null) {
    ModManager.register(ret);
  }
  return ret;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
},{}]},{},[1]);
