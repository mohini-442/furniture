(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by LiveScript 1.3.0
(function(){
  var ret;
  ret = {
    id: 'infinity',
    type: 'spinner',
    name: 'Infinity',
    desc: "moving path along an infinity shape. be sure to try larger length",
    tags: ['infinity', 'dash', 'line', 'curve', 'rotate', 'cycle'],
    slug: "infinity-rotate-cycle-loader",
    license: 'free',
    support: {
      css: false
    },
    edit: {
      stroke: {
        name: "Stroke Color",
        type: 'color',
        'default': '#e90c59',
        priority: 1.1
      },
      round: {
        name: "Round Cap",
        type: 'boolean',
        'default': true
      },
      w: {
        name: "Stroke Width",
        type: 'number',
        'default': 8,
        min: 1,
        max: 20
      },
      dashLen: {
        name: "Dash Length",
        type: 'number',
        'default': 32,
        min: 2,
        max: 100
      },
      scale: {
        name: "Scale",
        type: 'number',
        'default': 0.8,
        min: 0.01,
        max: 1,
        step: 0.01
      }
    },
    watch: function(n, o){
      var len, dlen1, dlen2, count;
      len = 256.58892822265625;
      if (n.dashLen >= 50) {
        dlen1 = len * n.dashLen * 0.01;
        dlen2 = len - dlen1;
      } else {
        dlen1 = len * n.dashLen * 0.01;
        count = Math.floor(len / dlen1);
        count = (count || 1) * 2;
        dlen1 = dlen2 = len / count;
      }
      return import$(this.local, {
        dasharray: dlen1 + " " + dlen2,
        dashoffset: "0;" + len
      });
    },
    dom: function(cfg){
      var lc, cap;
      lc = this.local;
      cap = cfg.round ? 'round' : 'butt';
      return "<path fill=\"none\" stroke=\"" + cfg.stroke + "\" stroke-width=\"" + cfg.w + "\" stroke-dasharray=\"" + lc.dasharray + "\" d=\"M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z\" stroke-linecap=\"" + cap + "\" style=\"transform:scale(" + cfg.scale + ");transform-origin:50px 50px\">\n  <animate attributeName=\"stroke-dashoffset\" repeatCount=\"indefinite\" dur=\"" + 1 / cfg.speed + "s\"\n  keyTimes=\"0;1\" values=\"" + lc.dashoffset + "\"/>\n</path>";
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  if (typeof ModManager != 'undefined' && ModManager !== null) {
    ModManager.register(ret);
  }
  return ret;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}]},{},[1]);
