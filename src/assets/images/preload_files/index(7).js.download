(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by LiveScript 1.3.0
(function(){
  var ret;
  ret = {
    id: 'ellipsis',
    type: 'spinner',
    name: 'Ellipsis',
    desc: "typing, speaking, usually used in an ongoing conversation",
    tags: ['speaking', 'discussion', 'text', 'ellipsis', 'typing', 'move'],
    slug: "discuss-ellipsis-preloader",
    license: 'by',
    edit: {
      c1: {
        name: "Color 1",
        type: 'color',
        'default': '#e15b64'
      },
      c2: {
        name: "Color 2",
        type: 'color',
        'default': '#f47e60'
      },
      c3: {
        name: "Color 3",
        type: 'color',
        'default': '#f8b26a'
      },
      c4: {
        name: "Color 4",
        type: 'color',
        'default': '#abbd81'
      },
      r: {
        name: "Radius",
        type: 'number',
        'default': 10
      }
    },
    download: function(arg$){
      var type, ref$, cfg, lc, s, html, y, x1, x2, x3, size, cs, css, i$, i, begin;
      type = arg$.type;
      if (type !== 'css') {
        return;
      }
      ref$ = [this.config, this.local], cfg = ref$[0], lc = ref$[1];
      s = (ref$ = cfg.size / 100) > 1 ? ref$ : 1;
      html = "<div></div><div></div><div></div><div></div><div></div>";
      y = (50 - cfg.r) * s + "px";
      ref$ = [16, 50, 84].map(function(it){
        return (it - cfg.r) * s + "px";
      }), x1 = ref$[0], x2 = ref$[1], x3 = ref$[2];
      size = cfg.r * 2 * s + "px";
      cs = [1, 2, 3, 4].map(function(it){
        return cfg["c" + it];
      });
      css = "@keyframes $id {\n   0% { transform: translate(" + x1 + "," + y + ") scale(0); }\n  25% { transform: translate(" + x1 + "," + y + ") scale(0); }\n  50% { transform: translate(" + x1 + "," + y + ") scale(1); }\n  75% { transform: translate(" + x2 + "," + y + ") scale(1); }\n 100% { transform: translate(" + x3 + "," + y + ") scale(1); }\n}\n@keyframes $id-r {\n   0% { transform: translate(" + x3 + "," + y + ") scale(1): }\n 100% { transform: translate(" + x3 + "," + y + ") scale(0); }\n}\n@keyframes $id-c {\n   0% { background: " + cs[0] + " }\n  25% { background: " + cs[3] + " }\n  50% { background: " + cs[2] + " }\n  75% { background: " + cs[1] + " }\n 100% { background: " + cs[0] + " }\n}\n.$id div {\n  position: absolute;\n  width: " + size + ";\n  height: " + size + ";\n  border-radius: 50%;\n  transform: translate(" + x2 + "," + y + ") scale(1);\n  background: " + cs[0] + ";\n  animation: $id " + 1 / cfg.speed + "s infinite cubic-bezier(0,0.5,0.5,1);\n}\n.$id div:nth-child(1) {\n  background: " + cs[1] + ";\n  transform: translate(" + x3 + "," + y + ") scale(1);\n  animation: $id-r " + 0.25 / cfg.speed + "s infinite cubic-bezier(0,0.5,0.5,1), $id-c " + 1 / cfg.speed + "s infinite step-start;\n}";
      for (i$ = 1; i$ <= 4; ++i$) {
        i = i$;
        begin = -i / (4 * cfg.speed);
        css += ".$id div:nth-child(" + (i + 1) + ") {\n  animation-delay: " + begin + "s;\n  background: " + cs[i - 1] + ";\n}";
      }
      return {
        html: html,
        css: css
      };
    },
    dom: function(config){
      var lc, spline, ts, rs, xs, cs, svg, i$, i, begin, c;
      lc = this.local;
      spline = "0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1";
      ts = "0;0.25;0.5;0.75;1";
      rs = [0, 0, config.r, config.r, config.r].join(';');
      xs = [16, 16, 16, 50, 84].join(';');
      cs = [1, 4, 3, 2, 1].map(function(it){
        return config["c" + it];
      }).join(';');
      svg = "<circle cx=\"84\" cy=\"50\" r=\"10\" fill=\"" + config.c1 + "\">\n    <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"" + 0.25 / config.speed + "s\" calcMode=\"spline\"\n    keyTimes=\"0;1\" values=\"" + config.r + ";0\" keySplines=\"0 0.5 0.5 1\" begin=\"0s\"/>\n    <animate attributeName=\"fill\" repeatCount=\"indefinite\" dur=\"" + 1 / config.speed + "s\" calcMode=\"discrete\"\n    keyTimes=\"" + ts + "\" values=\"" + cs + "\" begin=\"0s\"/>\n</circle>";
      for (i$ = 0; i$ < 4; ++i$) {
        i = i$;
        begin = -i / (4 * config.speed);
        c = config["c" + (i + 1)];
        svg += "<circle cx=\"" + (16 + (i % 3) * 34) + "\" cy=\"50\" r=\"10\" fill=\"" + c + "\">\n  <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"" + 1 / config.speed + "s\" calcMode=\"spline\"\n  keyTimes=\"" + ts + "\" values=\"" + rs + "\" keySplines=\"" + spline + "\" begin=\"" + begin + "s\"/>\n  <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"" + 1 / config.speed + "s\" calcMode=\"spline\"\n  keyTimes=\"" + ts + "\" values=\"" + xs + "\" keySplines=\"" + spline + "\" begin=\"" + begin + "s\"/>\n</circle>";
      }
      return svg;
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  if (typeof ModManager != 'undefined' && ModManager !== null) {
    ModManager.register(ret);
  }
  return ret;
})();
},{}]},{},[1]);
